#include "header.h"																	//хэдер с прототипами функций и необходимыми библиотеками

int input_nat()																		//функция ввода натурального числа
{
	int n = 0;																		//размерность массива
	int k = 1;																		//вспомогательная переменная для проверки на ввод целого числа

	do																				//ввод размерности массива с проверкой на целое число
	{
		rewind(stdin);																//очистка буфера
		k = scanf_s("%d", &n);

		if (!k || n <= 0)
			printf("Должно быть введено натуральное число!\n");
	} while (!k || n <= 0);															//если введено не целое число, цикл повторяется

	return n;
}

char* allocate_memory(int n)														//функция выделения памяти
{
	char* a;

	a = (char*)calloc(n + 1, sizeof(char));											//выделение памяти для n символов и 1 для нуль-символа
	if (!a)																			//проверка, была ли выделена память
	{
		printf("Память не была выделена!");
		return 0;
	}

	return a;
}

void get_string(char* a, int n)														//функция ввода строки
{
	int i = 0;

	if (a)
	{
		rewind(stdin);																//очистка буфера
		while (i < n)
		{
			*(a + i) = getchar();													//ввод очередного символа
			if (*(a + i) == '\n')													//если ввод строки окончен досрочно нажатием Enter, то цикл прерывается
				break;
			i++;
		}
		*(a + i) = '\0';															//размещение нуль-символа в конце строки
	}
}

char* replace(char* str, char* str1, char* str2)									//функция замены всех вхождений подстроки str1 на str2 в строке str
{
	int i = 0,																		//счётчики циклов
		j = 0,
		k = 0;
	char* temp;																		//буффер, в котором хранится строка после перевыделения памяти

	if (str)
	{
		while(i < get_length(str) - get_length(str1) + 1)							
		{
			if (*(str + i) == *str1)												//если в строке str встречается первый символ подстроки str1
				if (compare(str, str1, i))											//если строки полностью совпадают
				{
					for (j = 0; j < get_length(str1); j++)							//удаление подстроки str1 в строке str
						for (k = i; k < get_length(str); k++)
							*(str + k) = *(str + k + 1);

					temp = (char*)realloc(str, sizeof(char) * (get_length(str) + get_length(str2) + 1));	//перевыделение памяти
					if (temp) str = temp;																	//проверка, успешно ли была перевыделена память

					for (j = get_length(str2); j > 0; j--)							//вставка подстроки str2 в строку str
					{
						for (k = get_length(str) + 1; k > i; k--)					//сдвиг вправо, начиная с i-го символа
							*(str + k) = *(str + k - 1);
						*(str + i) = *(str2 + j - 1);								//вставка очередного символа
					}

					i += get_length(str2) - get_length(str1) + 1;					//сохранение порядка обработки символов в строке str с учётом изменения её длины
				}
			i++;																	//переход к следующему символу
		}
	}
	return str;
}

char* copy(char* str, int k)													//функция копирования одного слова из строки, начиная с n-го символа
{
#define ch *(str + k + p)													//макрос для упрощения восприятия кода

	char* word;																	//символьная строка, содержащая слово
	int p = 0,																	//длина этой строки
		i = 0;

	while (ch != ' ' && ch != '!' && ch != '?' && ch != '.' && ch != ','
		&& ch != ':' && ch != ';' && ch != '\0' && ch != EOF) p++;				//пока не встречен знак препинания
	word = (char*)calloc(p, sizeof(char));										//выделение памяти для массива

	if (word)																	//если память была выделена
	{
		for (i = 0; i < p; i++)
			*(word + i) = *(str + k + i);										//копирование очередного символа
		*(word + i) = '\0';														//размещение нуль-символа в конце строки
	}

	return word;
}

int compare(char* str, char* str1, int k)											//функция проверки, является ли str1 подстрокой строки str, начиная с k-го символа
{
	int i = 0;

	for (i = 0; i < get_length(str1); i++)
		if (*(str + k + i) != *(str1 + i)) return 0;								//если хотя бы один символ не совпадает, то выполнение функции прекращается

	return 1;																		//функция возвращает 1 при успешном выполнении и 0 при неудачном
}

int get_length(char* str)															//функция определения длины строки
{
	int i = 0;																		//счётчик кол-ва символов в строке

	while (*(str + i) != '\0') i++;													//увеличивать счётчик, пока не будет встречен нуль-символ

	return i;
}