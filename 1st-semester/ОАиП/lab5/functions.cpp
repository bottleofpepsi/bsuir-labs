#include "header.h"															//хэдер с прототипами функций и необходимыми библиотеками	


int input_int()																//функция ввода целого числа
{
	int k = 0;																//вспомогательная переменная для проверки на ввод целого числа
	int t = 0;

	do
	{
		rewind(stdin);														//очистка буфера
		k = scanf_s("%d", &t);												//ввод числа

		if (!k) printf("Должно быть введено число!\n");
	} while (!k);															//цикл не закончится, пока не будет введено целое число

	return t;																//возврат введённого числа
}

int input_nat()																//функция ввода натурального числа
{
	int n = 0,																//размерность массива
		k = 1;																//индикатор повторного ввода числа

	do
	{
		n = input_int();													//вызов функции ввода целого числа (натуральное число всегда целое)
		if (n <= 0) 
			printf("Должно быть введено натуральное число!\n");				//если ввод осуществляется второй и более раз, то выводится уведомление	
	} while (n <= 0);														//цикл не закончится, пока не будет введено натуральное число

	return n;																//возврат введённого числа
}

int** allocate_memory(int n, int m)											//функция выделения памяти
{
	int** a;											

	a = (int**)calloc(m, sizeof(int*));										//выделение памяти для двумерного массива
	if (!a) return nullptr;

	for (int i = 0; i < n; i++)
		*(a + i) = (int*)calloc(n, sizeof(int));							//выделение памяти для одномерных массивов

	return a;																//возврат массива с выделенной памятью
}

void input_array(int** a, int n)											//функция ввода элементов массива
{
	int i = 0,																//счётчики цикла
		j = 0;

	for (i = 0; i < n; i++)
		for (j = 0; j < n; j++)
		{
			printf("Введите элемент с координатами (%d;%d): ", i + 1, j + 1);
			*(*(a + i) + j) = input_int();									//ввод очередного элемента массива
		}
}

int exeption(int** a, int n)												//функция обработки исключения, когда все элементы равны между собой
{
	int i = 0,																//счётчики цикла
		j = 0,
		flag = 0;															//индикатор наличия исключения (1 - все эл-ты равны, 0 - хотя бы один эл-т не равен остальным)

	for (i = 0; i < n; i++)
		for (j = 0; j < n; j++)
			if (**a != *(*(a + i) + j)) return flag = 1;					//если хотя бы один элемент не равен остальным, то исключения нет

	return flag;															
}

void print_array(int** a, int n)											//функция вывода массива на экран
{
	int i = 0,																//счётчики цикла
		j = 0;

	printf("\nВведённая матрица:\n");
	for (i = 0; i < n; i++)
	{
		for (j = 0; j < n; j++)
			printf("%3d ", *(*(a + i) + j));								//вывод на экран очередного элемента
		printf("\n");														//перенос на новую строку
	}
	printf("\n");
}

int** algorithm(int** a, int n)												//функция основного алгоритма
{
	int** coords;															//массив, содержащий 
	int  i = 0,																//счётчики цикла
		 j = 0,
		 min = 0,															//присвоение минимально возможного значения 
		 max = 0;															//присвоение максимального возможного значения

	coords = allocate_memory(n, 2);											//выделение памяти

	for (i = 0; i < n; i++)													//поиск максимальных значений в строках
	{
		max = **(a + i);													//за максимальное значение для сравнения берётся первый элемент очередной строки
		for (j = 1; j < n; j++)
			if (*(*(a + i) + j) > max)
				max = *(*(a + i) + j);										//если очередной элемент больше, то он становится максимальным
		*(*coords + i) = max;												//значение максимального эл-та записывается в массив
	}

	for (i = 0; i < n; i++)													//поиск минимальных значений в столбцах
	{
		min = **(a + i);													//за минимальное значение для сравнения берётся первый элемент очередного столбца
		for (j = 0; j < n; j++)
			if (*(*(a + j) + i) < min)
				min = *(*(a + j) + i);										//если очередной элемент меньше, то он становится минимальным
		*(*(coords + 1) + i) = min;											//значение минимального эл-та записывается в массив
	}

	return coords;
}

int result(int** array, int n)												//функция вывода результата
{
	int count = 0,															//счётчик кол-ва седловых точек
		i = 0,																//счётчики цикла
		j = 0;

	for (i = 0; i < n; i++)													//вывод результата
		for (j = 0; j < n; j++)
			if (*(*array + i) == *(*(array + 1) + j))
			{
				count++;													//посчёт кол-ва седловых точек
				printf("%d — седловая точка матрицы, имеет координаты (%d, %d)\n", *(*array + i), i + 1, j + 1);
			}

	return count;
}